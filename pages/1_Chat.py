"""
Chat Interface Page
Interactive conversation with AI psychologist
"""

import streamlit as st
import time
from datetime import datetime

st.set_page_config(
    page_title="Discussion - CarIAct√©rologie",
    page_icon="üí¨",
    layout="wide"
)

def initialize_session_state():
    """Initialize session state variables"""
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {
                "role": "assistant", 
                "content": "Bonjour ! Je suis votre psychologue IA, sp√©cialis√© dans la caract√©rologie de Ren√© Le Senne. Je suis ici pour vous aider √† vous d√©couvrir √† travers des conversations significatives. Qu'aimeriez-vous explorer concernant votre personnalit√© aujourd'hui ?",
                "timestamp": datetime.now()
            }
        ]
    if "typing" not in st.session_state:
        st.session_state.typing = False

def display_message(message, is_user=False):
    """Display a chat message with appropriate styling"""
    with st.container():
        if is_user:
            st.markdown(f"""
            <div style="display: flex; justify-content: flex-end; margin: 1rem 0;">
                <div style="background: #667eea; color: white; padding: 1rem; border-radius: 18px 18px 4px 18px; max-width: 70%; word-wrap: break-word;">
                    {message['content']}
                </div>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div style="display: flex; justify-content: flex-start; margin: 1rem 0;">
                <div style="background: #f1f3f4; color: #333; padding: 1rem; border-radius: 18px 18px 18px 4px; max-width: 70%; word-wrap: break-word;">
                    {message['content']}
                    <br><small style="color: #888; font-size: 0.8rem;">{message.get('timestamp', datetime.now()).strftime('%H:%M')}</small>
                </div>
            </div>
            """, unsafe_allow_html=True)

def generate_mock_response(user_message):
    """Generate a mock psychological response"""
    mock_responses = [
        "C'est une perspective fascinante. En caract√©rologie, nous voyons souvent que de telles pens√©es refl√®tent des patterns de personnalit√© plus profonds. Pouvez-vous me parler davantage du moment o√π vous avez remarqu√© cela pour la premi√®re fois chez vous ?",
        
        "Je remarque des traits de caract√®re int√©ressants qui √©mergent de ce que vous avez partag√©. Selon le cadre de Le Senne, cela pourrait indiquer certains patterns √©motionnels et d'activit√©. Comment r√©agissez-vous g√©n√©ralement dans des situations difficiles ?",
        
        "Votre r√©ponse sugg√®re des aspects intrigants de votre structure de caract√®re. En caract√©rologie, nous analysons trois facteurs principaux : l'√âmotivit√©, l'Activit√© et la R√©sonance. Lequel de ces facteurs r√©sonne le plus avec votre auto-perception ?",
        
        "C'est tr√®s perspicace. Je commence √† voir des patterns qui pourraient s'aligner avec l'un des huit types de caract√®re du syst√®me de Le Senne. Vous sentez-vous plus attir√© par les d√©tails concrets ou les concepts abstraits ?",
        
        "Merci de partager cela. Votre ouverture sugg√®re une volont√© d'explorer votre monde int√©rieur. Dans mon analyse, je remarque des indicateurs potentiels de traits de caract√®re sp√©cifiques. Comment d√©cririez-vous vos niveaux d'√©nergie tout au long de la journ√©e ?"
    ]
    
    import random
    return random.choice(mock_responses)

def main():
    """Main chat interface"""
    initialize_session_state()
    
    # Custom CSS for chat interface with help tooltips
    st.markdown("""
    <style>
        /* Fix viewport to prevent any scrolling */
        .main .block-container {
            height: 100vh;
            max-height: 100vh;
            overflow: hidden;
            padding: 0.5rem;
            display: flex;
            flex-direction: column;
        }
        
        /* Ensure sidebar doesn't cause overflow */
        .css-1d391kg {
            padding-bottom: 1rem;
        }
        
        /* Reduce all gaps to minimum */
        div[data-testid="stVerticalBlock"] {
            gap: 0.25rem;
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        /* Minimize all margins */
        .element-container {
            margin: 0;
        }
        
        /* Remove extra padding */
        div[data-testid="stContainer"] {
            padding: 0;
            margin: 0;
        }
        
        /* Fix chat input positioning */
        div[data-testid="stChatInput"] {
            margin-top: 0.5rem;
            margin-bottom: 0;
        }
        
        /* Help Tooltip Styles */
        .help-tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
            color: #ffffff;
            margin-left: 5px;
            opacity: 0.8;
        }
        .help-tooltip:hover {
            opacity: 1;
        }
        .help-tooltip .tooltiptext {
            visibility: hidden;
            width: 260px;
            background-color: #333;
            color: #fff;
            text-align: left;
            border-radius: 6px;
            padding: 8px;
            position: absolute;
            z-index: 1000;
            bottom: 125%;
            left: 50%;
            margin-left: -130px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.85rem;
            line-height: 1.3;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        .help-tooltip .tooltiptext::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #333 transparent transparent transparent;
        }
        .help-tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        .chat-help {
            background: rgba(255,255,255,0.1);
            padding: 0.5rem;
            border-radius: 4px;
            margin-bottom: 0.5rem;
            font-size: 0.85rem;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Header - ultra compact design with help tooltip
    st.markdown("""
    <div style="background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); padding: 0.6rem; border-radius: 8px; margin-bottom: 0.3rem; color: white; text-align: center;">
        <h2 style="margin: 0; padding: 0; font-size: 1.3rem;">üí¨ Session de Discussion Psychologique
            <span class="help-tooltip">‚ùì
                <span class="tooltiptext">
                    Ceci est un espace s√ªr pour explorer votre personnalit√©. Partagez vos pens√©es, exp√©riences, r√©actions et sentiments. L'IA posera des questions de suivi pour comprendre vos patterns de caract√®re.
                </span>
            </span>
        </h2>
        <p style="margin: 0.2rem 0 0 0; font-size: 0.85rem;">Explorez votre caract√®re √† travers la conversation</p>
        <div class="chat-help">
            üí° Conseil : Soyez honn√™te et sp√©cifique sur vos exp√©riences pour de meilleurs insights
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Main chat area - use columns to better handle sidebar layout
    col1, col2 = st.columns([4, 0.1])  # Small right margin for better spacing
    
    with col1:
        # Chat messages container - calculated to fit viewport exactly
        # Viewport (100vh) - Header (65px) - Input (90px) - Padding (30px) = ~515px
        chat_container = st.container(height=515)
        with chat_container:
            # Display all messages
            for message in st.session_state.messages:
                is_user = message["role"] == "user"
                display_message(message, is_user)
            
            # Show typing indicator if needed
            if st.session_state.typing:
                st.markdown("""
                <div style="display: flex; justify-content: flex-start; margin: 1rem 0;">
                    <div style="background: #f1f3f4; color: #888; padding: 1rem; border-radius: 18px; font-style: italic;">
                        L'IA r√©fl√©chit...
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        # Chat input - positioned directly below the messages
        user_input = st.chat_input("Partagez vos pens√©es, sentiments, ou posez des questions sur votre personnalit√©...")
        
        if user_input:
            # Add user message
            st.session_state.messages.append({
                "role": "user",
                "content": user_input,
                "timestamp": datetime.now()
            })
            
            # Show typing indicator
            st.session_state.typing = True
            st.rerun()
    
    # Process response (simulated delay)
    if st.session_state.typing:
        time.sleep(1)  # Simulate processing time
        
        # Generate and add AI response
        ai_response = generate_mock_response(st.session_state.messages[-1]["content"])
        st.session_state.messages.append({
            "role": "assistant",
            "content": ai_response,
            "timestamp": datetime.now()
        })
        
        st.session_state.typing = False
        st.rerun()
    
    # Sidebar with conversation tools
    with st.sidebar:
        st.markdown("### üí≠ Outils de Conversation")
        
        col1, col2 = st.columns([4, 1])
        with col1:
            if st.button("üîÑ Nouvelle Session", use_container_width=True):
                st.session_state.messages = [
                    {
                        "role": "assistant", 
                        "content": "Bonjour ! Je suis votre psychologue IA. Qu'aimeriez-vous explorer concernant votre personnalit√© aujourd'hui ?",
                        "timestamp": datetime.now()
                    }
                ]
                st.rerun()
        with col2:
            st.markdown("‚ùì", help="Commencer une nouvelle conversation - votre discussion pr√©c√©dente sera perdue")
        
        col1, col2 = st.columns([4, 1])
        with col1:
            if st.button("üì• Sauvegarder la Conversation", use_container_width=True):
                st.success("Conversation sauvegard√©e dans votre historique de session !")
        with col2:
            st.markdown("‚ùì", help="Sauvegarder cette conversation pour la revoir plus tard dans votre tableau de bord")
        
        col1, col2 = st.columns([4, 1])
        with col1:
            if st.button("üìä Analyser la Session", use_container_width=True):
                st.info("L'analyse sera disponible apr√®s avoir collect√© plus de donn√©es de conversation.")
        with col2:
            st.markdown("‚ùì", help="G√©n√©rer des insights psychologiques bas√©s sur cette conversation")
        
        st.markdown("---")
        st.markdown("### üìà Statistiques de Session")
        st.metric("Messages", len(st.session_state.messages), help="Total des messages √©chang√©s dans cette session")
        st.metric("Dur√©e de Session", "15 mins", help="Dur√©e de la conversation actuelle")
        st.metric("Insights D√©tect√©s", "3", help="Nombre d'insights de personnalit√© identifi√©s")
        
        # Add conversation tips
        st.markdown("---")
        with st.expander("üí° Conseils de Conversation"):
            st.markdown("""
            **Quoi partager :**
            - Exp√©riences personnelles et r√©actions
            - Comment vous g√©rez le stress ou les d√©fis
            - Vos pr√©f√©rences et style de prise de d√©cision
            - Relations et interactions sociales
            - Approches de travail ou d'√©tude
            
            **Meilleures r√©ponses :**
            - "Quand je suis stress√©(e), j'ai tendance √†..." ‚úÖ
            - "Je me sens stress√©(e)" ‚ùå
            - "Dans les conflits, j'ai tendance √†..." ‚úÖ
            - "Je n'aime pas les conflits" ‚ùå
            """)

if __name__ == "__main__":
    main()